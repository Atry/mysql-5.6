--source include/have_rocksdb.inc

--let $rpl_server_count= 2
--let $rpl_topology= none
--source include/rpl_init.inc
--source include/rpl_default_connections.inc

# Define mysqldumpfile here.  It is used to capture mysqldump output
# in order to test the output's ability to restore an exact copy of the table
let $mysqldumpfile = $MYSQL_TMP_DIR/mysqldumpfile.sql;

connection server_1;
--echo # Initialize the database on source server that will be dumped and populate some records.
create database db1;
use db1;
create table t1 (
  `id` int not null auto_increment,
  `k` int,
  `data` varchar(2048),
  primary key (`id`),
  key (`k`)
) engine=rocksdb;
insert into t1(k, data) values (999, 'hello');
insert into t1(k, data) values (1000, 'world');

--echo # Test that dumping innodb table will not dump internal id
create table t1_innodb (
  `id` int not null auto_increment,
  `k` int,
  `data` varchar(2048),
  primary key (`id`),
  key (`k`)
) engine=innodb;

select * from information_schema.rocksdb_ddl where table_schema = 'db1';
# Use the fact that the rocksdb_locks shows the keys as they are encoded to
# validate that the keys were encoded as expected
BEGIN;
SELECT hex(id) FROM db1.t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

--echo Dump with rocksdb_dump_internal_id
--exec $MYSQL_DUMP --skip-comments --single-transaction --master-data=2 --print-ordering-key --rocksdb --order-by-primary-desc --rocksdb_bulk_load --rocksdb_dump_internal_id db1 > $mysqldumpfile

connection server_2;
call mtr.add_suppression("RocksDB: Conflict when changing index_number.*");
call mtr.add_suppression("RocksDB: rocksdb_alter_cur_db_num database is not empty.*");

create database db1;
create database db2;

--echo # Create table T2 on server 2 that will have same index number as T1 on server 1.
create table db1.t2 (
  a int primary key
) engine=rocksdb;

--echo # Create table T3 on server 2 that will have 1 index number same as T1 on server 1.
create table db1.t3 (
  a int primary key,
  b int,
  key(b)
) engine=rocksdb;

--echo # Recreate table T4 on server 2 that will have no index number same as T1 on server 1.
create table db1.t4 (
  a int primary key,
  b int,
  key(b)
) engine=rocksdb;

select * from information_schema.rocksdb_ddl;

--echo # replaying mysqldump will fail because of conflicting index number in db1.t2
--error 1
--exec $MYSQL_SLAVE db1 < $mysqldumpfile

drop table db1.t2;
select * from information_schema.rocksdb_ddl;
--echo # replaying mysqldump will fail because of conflicting index number in db1.t3
--error 1
--exec $MYSQL_SLAVE db1 < $mysqldumpfile

--echo # renameing t3 to different database will still keep the same index numbers.
rename table db1.t3 to db2.t3;
select * from information_schema.rocksdb_ddl;
--echo # replaying mysqldump will fail because of conflicting index number in db2.t3
--error 1
--exec $MYSQL_SLAVE db1 < $mysqldumpfile

drop table db2.t3;
--echo # Enter data in db1.t4 and verify that the replay of mysqldump fails 
insert into db1.t4 values(1,2);
select * from information_schema.rocksdb_ddl;
--error 1
--exec $MYSQL_SLAVE db1 < $mysqldumpfile

--echo # Clear all the data in db1 and verify that mysqldump replay will succeed.
delete from db1.t4;
select * from information_schema.rocksdb_ddl;
--exec $MYSQL_SLAVE db1 < $mysqldumpfile

select * from information_schema.rocksdb_ddl where table_schema = 'db1';

# Use the fact that the rocksdb_locks shows the keys as they are encoded to
# validate that the keys were encoded as expected
BEGIN;
SELECT hex(id) FROM db1.t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

insert into db1.t1(k, data) values (1001, '!!!!!');
select * from db1.t1;

select * from information_schema.rocksdb_ddl where table_schema = 'db1';
# Use the fact that the rocksdb_locks shows the keys as they are encoded to
# validate that the keys were encoded as expected
BEGIN;
SELECT hex(id) FROM db1.t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

connection server_1;
drop database db1;
connection server_2;
drop database db1;
drop database db2;

--remove_file $mysqldumpfile
--source include/rpl_end.inc
