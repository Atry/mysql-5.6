--source include/have_rocksdb.inc

--let $rpl_server_count= 2
--let $rpl_topology= none
--source include/rpl_init.inc
--source include/rpl_default_connections.inc

# Define mysqldumpfile here.  It is used to capture mysqldump output
# in order to test the output's ability to restore an exact copy of the table
let $mysqldumpfile = $MYSQL_TMP_DIR/mysqldumpfile.sql;

connection server_1;
create database db1;
use db1;
create table t1 (
  `id` int not null auto_increment,
  `k` int,
  `data` varchar(2048),
  primary key (`id`),
  key (`k`)
) engine=rocksdb;
insert into t1(k, data) values (999, 'hello');
insert into t1(k, data) values (1000, 'world');

select * from information_schema.rocksdb_ddl where table_schema = 'db1';
# Use the fact that the rocksdb_locks shows the keys as they are encoded to
# validate that the keys were encoded as expected
BEGIN;
SELECT hex(id) FROM db1.t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

--echo Dump with rocksdb_dump_internal_id
--exec $MYSQL_DUMP --skip-comments --single-transaction --master-data=2 --print-ordering-key --rocksdb --order-by-primary-desc --rocksdb_bulk_load --rocksdb_dump_internal_id db1 > $mysqldumpfile

connection server_2;
create database db1;
create database db2;

--echo # Create table T1 on another database on server 2 that will have same index number as T1 on server 1.
--echo # The database number will be different, so mysqldump replay will not fail.
create table db2.t1 (
  a int primary key,
  b int,
  key(b)
) engine=rocksdb;
insert into db2.t1 values(100, 101);
insert into db2.t1 values(102, 103);

select * from information_schema.rocksdb_ddl where table_schema = 'db1' or table_schema = 'db2';

# Use the fact that the rocksdb_locks shows the keys as they are encoded to
# validate that the keys were encoded as expected
BEGIN;
SELECT hex(a) FROM db2.t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

--echo # mysqldump replay will succeed on db1.
--exec $MYSQL_SLAVE db1 < $mysqldumpfile

select * from information_schema.rocksdb_ddl where table_schema = 'db1' or table_schema = 'db2';

# Use the fact that the rocksdb_locks shows the keys as they are encoded to
# validate that the keys were encoded as expected
BEGIN;
SELECT hex(id) FROM db1.t1 FOR UPDATE;
SELECT hex(a) FROM db2.t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

--echo # Verify the tables in db1 and db2 by running DML and checking content.
insert into db1.t1(k, data) values (1001, '!!!!!');
insert into db2.t1 values(104, 105);

select * from information_schema.rocksdb_ddl where table_schema = 'db1' or table_schema = 'db2';

# Use the fact that the rocksdb_locks shows the keys as they are encoded to
# validate that the keys were encoded as expected
BEGIN;
SELECT hex(id) FROM db1.t1 FOR UPDATE;
SELECT hex(a) FROM db2.t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

connection server_1;
drop database db1;
connection server_2;
drop database db1;
drop database db2;

--remove_file $mysqldumpfile
--source include/rpl_end.inc
